# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2025-02-17 05:56
from __future__ import unicode_literals

import ckeditor.fields
import disturbance.components.approvals.models
import disturbance.components.compliances.models
import disturbance.components.organisations.models
import disturbance.components.proposals.models
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
import smart_selects.db_fields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('disturbance', '0017_auto_20191030_1200'),
    ]

    operations = [
        migrations.CreateModel(
            name='CddpQuestionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('default', models.BooleanField(default=False)),
                ('members', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Spatial Question Group',
            },
        ),
        migrations.CreateModel(
            name='DASMapLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=100)),
                ('layer_name', models.CharField(max_length=200)),
                ('layer_url', models.CharField(blank=True, max_length=256, null=True)),
                ('cache_expiry', models.IntegerField(default=300)),
                ('option_for_internal', models.BooleanField(default=True)),
                ('option_for_external', models.BooleanField(default=True)),
                ('display_all_columns', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Disturbance map layer',
            },
        ),
        migrations.CreateModel(
            name='ExportDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_file', models.FileField(max_length=255, storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.proposals.models.export_file_path)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='MapColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('option_for_internal', models.BooleanField(default=True)),
                ('option_for_external', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'map column',
            },
        ),
        migrations.CreateModel(
            name='MapLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, max_length=100, null=True)),
                ('layer_name', models.CharField(blank=True, max_length=200, null=True)),
                ('option_for_internal', models.BooleanField(default=True)),
                ('option_for_external', models.BooleanField(default=True)),
                ('display_all_columns', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'map layer',
            },
        ),
        migrations.CreateModel(
            name='MasterlistQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('question', models.TextField()),
                ('answer_type', models.CharField(choices=[('text', 'Text'), ('radiobuttons', 'Radio button'), ('checkbox', 'Checkbox'), ('number', 'Number'), ('email', 'Email'), ('select', 'Select'), ('multi-select', 'Multi-select'), ('text_area', 'Text area'), ('label', 'Label'), ('declaration', 'Declaration'), ('file', 'File'), ('date', 'Date')], default='text', max_length=40, verbose_name='Answer Type')),
                ('help_text_url', models.BooleanField(default=False)),
                ('help_text_assessor_url', models.BooleanField(default=False)),
                ('help_text', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('help_text_assessor', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('property_cache', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, null=True)),
            ],
            options={
                'verbose_name': 'Schema Masterlist Question',
            },
        ),
        migrations.CreateModel(
            name='ProposalMapDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('_file', models.FileField(max_length=500, storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.proposals.models.update_proposal_map_doc_filename)),
                ('input_name', models.CharField(blank=True, max_length=255, null=True)),
                ('can_delete', models.BooleanField(default=True)),
                ('can_hide', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ProposalTypeSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_name', models.CharField(max_length=100)),
                ('section_label', models.CharField(max_length=100)),
                ('index', models.IntegerField(blank=True, default=0)),
            ],
            options={
                'verbose_name': 'Schema Proposal Type Section',
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255, unique=True)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Schema Question Option',
            },
        ),
        migrations.CreateModel(
            name='RenewalDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('_file', models.FileField(storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.approvals.models.update_approval_doc_filename)),
                ('can_delete', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SectionQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('isCopiedToPermit', 'isCopiedToPermit'), ('isRequired', 'isRequired'), ('canBeEditedByAssessor', 'canBeEditedByAssessor'), ('isRepeatable', 'isRepeatable'), ('isTitleColumnForDashboard', 'isTitleColumnForDashboard')], max_length=400, null=True)),
                ('order', models.PositiveIntegerField(default=1)),
                ('property_cache', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, null=True)),
                ('parent_answer', smart_selects.db_fields.ChainedForeignKey(blank=True, chained_field='parent_question', chained_model_field='masterlistquestion', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='options', to='disturbance.QuestionOption')),
                ('parent_question', smart_selects.db_fields.ChainedForeignKey(blank=True, chained_field='section', chained_model_field='question_sections__section', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children_question', to='disturbance.MasterlistQuestion')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='question_sections', to='disturbance.MasterlistQuestion')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='section_questions', to='disturbance.ProposalTypeSection')),
            ],
            options={
                'verbose_name': 'Schema Section Question',
            },
        ),
        migrations.CreateModel(
            name='SpatialQueryLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expiry', models.DateField(blank=True, null=True, verbose_name='Expiry Date')),
                ('visible_to_proponent', models.BooleanField(default=False)),
                ('buffer', models.PositiveIntegerField(blank=True, null=True)),
                ('how', models.CharField(choices=[('Overlapping', 'Overlapping'), ('Outside', 'Outside'), ('Inside', 'Inside')], default='Overlapping', max_length=40, verbose_name='Overlapping/Outside/Inside')),
                ('column_name', models.CharField(max_length=100, verbose_name='Name of layer attribute/field')),
                ('operator', models.CharField(choices=[('Equals', 'Equals'), ('Contains', 'Contains'), ('OR', 'OR'), ('Like', 'Like'), ('GreaterThan', 'Greather than'), ('LessThan', 'Less than'), ('IsNotNull', 'Is not null')], default='Equals', max_length=40, verbose_name='Operator')),
                ('value', models.CharField(blank=True, max_length=100, null=True)),
                ('prefix_answer', models.TextField(blank=True, null=True)),
                ('answer', models.TextField(blank=True, null=True)),
                ('prefix_info', models.CharField(blank=True, max_length=100, null=True)),
                ('assessor_info', models.TextField(blank=True, null=True)),
                ('proponent_items', django.contrib.postgres.fields.jsonb.JSONField(default=[{}], verbose_name='Proponent response set')),
                ('assessor_items', django.contrib.postgres.fields.jsonb.JSONField(default=[{}], verbose_name='Assessor response set')),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layers', to='disturbance.DASMapLayer')),
            ],
        ),
        migrations.CreateModel(
            name='SpatialQueryMetrics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField()),
                ('system', models.CharField(max_length=64, verbose_name='Application System Name')),
                ('request_type', models.CharField(choices=[('FULL', 'FULL'), ('PARTIAL', 'PARTIAL'), ('SINGLE', 'SINGLE'), ('REFRESH_PARTIAL', 'REFRESH_PARTIAL'), ('REFRESH_SINGLE', 'REFRESH_SINGLE'), ('TEST_GROUP', 'TEST_GROUP'), ('TEST_SINGLE', 'TEST_SINGLE')], max_length=40)),
                ('sqs_response', django.contrib.postgres.fields.jsonb.JSONField(default=[{}], verbose_name='Response from SQS')),
                ('time_taken', models.DecimalField(decimal_places=3, max_digits=9, verbose_name='Total time for request/response')),
                ('response_cached', models.NullBooleanField()),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='SpatialQueryQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('other_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Additional/Misc Data')),
                ('answer_mlq', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='question_options', to='disturbance.QuestionOption')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='disturbance.CddpQuestionGroup')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='questions', to='disturbance.MasterlistQuestion')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='TaskMonitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('failed', 'Failed'), ('created', 'Created'), ('running', 'Running'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('error', 'Error'), ('max_queue_time', 'Max_Queue_Time_Reached'), ('max_running_time', 'Max_Running_Time_Reached'), ('max_retries', 'Max_Retries_Reached')], default='created', max_length=32, verbose_name='Task Status')),
                ('retries', models.PositiveSmallIntegerField(default=0)),
                ('info', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('request_type', models.CharField(choices=[('FULL', 'FULL'), ('PARTIAL', 'PARTIAL'), ('SINGLE', 'SINGLE'), ('REFRESH_PARTIAL', 'REFRESH_PARTIAL'), ('REFRESH_SINGLE', 'REFRESH_SINGLE'), ('TEST_GROUP', 'TEST_GROUP'), ('TEST_SINGLE', 'TEST_SINGLE')], max_length=40)),
            ],
            options={
                'verbose_name_plural': 'Task Monitor',
            },
        ),
        migrations.CreateModel(
            name='TemporaryDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('_file', models.FileField(max_length=255, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='TemporaryDocumentCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.AlterModelOptions(
            name='activitymatrix',
            options={'verbose_name_plural': 'Approval matrix'},
        ),
        migrations.AlterModelOptions(
            name='proposaltype',
            options={'verbose_name': 'Schema Proposal Type'},
        ),
        migrations.AddField(
            model_name='applicationtype',
            name='domain_used',
            field=models.CharField(choices=[('das', 'DAS'), ('dummy', 'DUMMY')], default='das', max_length=40),
        ),
        migrations.AddField(
            model_name='applicationtype',
            name='searchable',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='approval',
            name='migrated',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='approval',
            name='proxy_applicant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='disturbance_proxy_approvals', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='globalsettings',
            name='help_text',
            field=ckeditor.fields.RichTextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='globalsettings',
            name='help_text_required',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='organisationrequest',
            name='template_group',
            field=models.CharField(choices=[('das', 'DAS'), ('dummy', 'DUMMY')], default='das', max_length=100),
        ),
        migrations.AddField(
            model_name='proposal',
            name='add_info_applicant',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='proposal',
            name='add_info_assessor',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='proposal',
            name='fee_invoice_references',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, default='', max_length=50, null=True), default=disturbance.components.proposals.models.fee_invoice_references_default, null=True, size=None),
        ),
        migrations.AddField(
            model_name='proposal',
            name='gis_info',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='proposal',
            name='history_add_info_assessor',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='proposal',
            name='layer_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='proposal',
            name='migrated',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='proposal',
            name='prefill_requested',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='proposal',
            name='prefill_timestamp',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='proposal',
            name='refresh_timestamp',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='proposal',
            name='reissued',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='proposal',
            name='shapefile_geom',
            field=django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Source/Submitter gdf.exploded (multi) polygon geometry'),
        ),
        migrations.AddField(
            model_name='proposal',
            name='shapefile_json',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Source/Submitter (multi) polygon geometry'),
        ),
        migrations.AddField(
            model_name='proposal',
            name='weekly_reminder_sent_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='proposalrequirement',
            name='copied_for_renewal',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='proposalrequirement',
            name='require_due_date',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='proposalstandardrequirement',
            name='system',
            field=models.CharField(choices=[('disturbance', 'Disturbance')], default='disturbance', max_length=20, verbose_name='System'),
        ),
        migrations.AlterField(
            model_name='activitymatrix',
            name='name',
            field=models.CharField(choices=[('Disturbance', 'Disturbance'), ('Ecological Thinning', 'Ecological Thinning')], default='Disturbance', max_length=24, verbose_name='Activity matrix name'),
        ),
        migrations.AlterField(
            model_name='amendmentrequestdocument',
            name='_file',
            field=models.FileField(max_length=500, storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.proposals.models.update_amendment_request_doc_filename),
        ),
        migrations.AlterField(
            model_name='applicationtype',
            name='name',
            field=models.CharField(choices=[('Disturbance', 'Disturbance'), ('Disturbance Training', 'Disturbance Training'), ('Disturbance Demo', 'Disturbance Demo'), ('Ecological Thinning', 'Ecological Thinning'), ('Powerline Maintenance', 'Powerline Maintenance'), ('Prescribed Burning', 'Prescribed Burning')], max_length=64, verbose_name='Application Type name'),
        ),
        migrations.AlterField(
            model_name='approval',
            name='applicant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='disturbance_approvals', to='disturbance.Organisation'),
        ),
        migrations.AlterField(
            model_name='approvaldocument',
            name='_file',
            field=models.FileField(storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.approvals.models.update_approval_doc_filename),
        ),
        migrations.AlterField(
            model_name='approvallogdocument',
            name='_file',
            field=models.FileField(null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.approvals.models.update_approval_comms_log_filename),
        ),
        migrations.AlterField(
            model_name='communicationslogentry',
            name='type',
            field=models.CharField(choices=[('email', 'Email'), ('phone', 'Phone Call'), ('mail', 'Mail'), ('person', 'In Person'), ('referral_complete', 'Referral Completed')], default='email', max_length=20),
        ),
        migrations.AlterField(
            model_name='compliance',
            name='proposal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliances', to='disturbance.Proposal'),
        ),
        migrations.AlterField(
            model_name='compliancedocument',
            name='_file',
            field=models.FileField(max_length=500, storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.compliances.models.update_proposal_complaince_filename),
        ),
        migrations.AlterField(
            model_name='compliancelogdocument',
            name='_file',
            field=models.FileField(storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.compliances.models.update_compliance_comms_log_filename),
        ),
        migrations.AlterField(
            model_name='globalsettings',
            name='key',
            field=models.CharField(choices=[('assessment_reminder_days', 'Assessment reminder days'), ('das_sharepoint_page', 'DAS Sharepoint page'), ('proposal_assess_help_page', 'DAS Proposal assess help page'), ('compliance_assess_help_page', 'DAS compliance assess help page'), ('referral_assess_help_page', 'DAS referral assess help page'), ('proposal_approver_help_page', 'DAS Proposal approver help page'), ('shapefile_info', 'Shapefile further information'), ('proposal_type_help_url', 'Proposal Type help url'), ('region_help_url', 'Region help url'), ('district_help_url', 'District help url'), ('activity_type_help_url', 'Activity type help url'), ('sub_activity_1_help_url', 'Sub activity 1 help url'), ('sub_activity_2_help_url', 'Sub activity 2 help url'), ('category_help_url', 'Category help url'), ('max_no_polygon', 'Maximum number of polygons allowed in the Shapefile')], max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='organisationcontact',
            name='user_status',
            field=models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('active', 'Active'), ('declined', 'Declined'), ('unlinked', 'Unlinked'), ('suspended', 'Suspended'), ('contact_form', 'ContactForm')], default='draft', max_length=40, verbose_name='Status'),
        ),
        migrations.AlterField(
            model_name='organisationlogdocument',
            name='_file',
            field=models.FileField(storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.organisations.models.update_organisation_comms_log_filename),
        ),
        migrations.AlterField(
            model_name='organisationrequest',
            name='identification',
            field=models.FileField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to='organisation/requests/%Y/%m/%d'),
        ),
        migrations.AlterField(
            model_name='organisationrequestlogdocument',
            name='_file',
            field=models.FileField(storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.organisations.models.update_organisation_request_comms_log_filename),
        ),
        migrations.AlterField(
            model_name='proposaldocument',
            name='_file',
            field=models.FileField(max_length=500, storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.proposals.models.update_proposal_doc_filename),
        ),
        migrations.AlterField(
            model_name='proposallogdocument',
            name='_file',
            field=models.FileField(storage=django.core.files.storage.FileSystemStorage(base_url='/private-media/', location='private-media/'), upload_to=disturbance.components.proposals.models.update_proposal_comms_log_filename),
        ),
        migrations.AlterField(
            model_name='proposaltype',
            name='name',
            field=models.CharField(choices=[('Disturbance', 'Disturbance'), ('Disturbance Training', 'Disturbance Training'), ('Disturbance Demo', 'Disturbance Demo'), ('Ecological Thinning', 'Ecological Thinning'), ('Powerline Maintenance', 'Powerline Maintenance'), ('Prescribed Burning', 'Prescribed Burning')], default='Disturbance', max_length=64, verbose_name='Application name (eg. Disturbance, Ecological Thinning)'),
        ),
        migrations.AddField(
            model_name='temporarydocument',
            name='temp_document_collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='disturbance.TemporaryDocumentCollection'),
        ),
        migrations.AddField(
            model_name='taskmonitor',
            name='proposal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='disturbance.Proposal'),
        ),
        migrations.AddField(
            model_name='taskmonitor',
            name='requester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='spatialquerymetrics',
            name='proposal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='metrics', to='disturbance.Proposal'),
        ),
        migrations.AddField(
            model_name='spatialquerylayer',
            name='spatial_query_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spatial_query_layers', to='disturbance.SpatialQueryQuestion'),
        ),
        migrations.AddField(
            model_name='renewaldocument',
            name='approval',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renewal_documents', to='disturbance.Approval'),
        ),
        migrations.AddField(
            model_name='proposaltypesection',
            name='proposal_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sections', to='disturbance.ProposalType'),
        ),
        migrations.AddField(
            model_name='proposalmapdocument',
            name='proposal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_documents', to='disturbance.Proposal'),
        ),
        migrations.AddField(
            model_name='masterlistquestion',
            name='option',
            field=models.ManyToManyField(blank=True, to='disturbance.QuestionOption'),
        ),
        migrations.AddField(
            model_name='mapcolumn',
            name='map_layer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='disturbance.MapLayer'),
        ),
        migrations.AddField(
            model_name='exportdocument',
            name='proposal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='disturbance.Proposal'),
        ),
        migrations.AddField(
            model_name='exportdocument',
            name='requester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='spatialqueryquestion',
            unique_together=set([('question', 'answer_mlq')]),
        ),
    ]
